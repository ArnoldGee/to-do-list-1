{"version":3,"sources":["AppHeader.js","AppFooter.js","NotepadComponents/DoList.js","NotepadComponents/DoneList.js","NotepadComponents/TaskInput.js","NotePad.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","className","AppFooter","href","target","rel","aria-hidden","DoList","props","doArray","map","item","index","Object","assign","sort","a","b","alphabeticalOrder","nameA","name","toUpperCase","nameB","importantOrder","important","key","title","onClick","handleCompleteToDo","dangerouslySetInnerHTML","__html","emoji","handleMarkAsImportant","DoneList","doneArray","handleReviveToDo","TaskInput","onSubmit","handleAddToDo","type","value","userInput","onChange","handleWriteTask","placeholder","NotePad","state","section","randomEmoji","handleChangeSection","bind","handleSortByAlphabeticalOrder","handleSortByImportant","getRandomEmoji","autoSave","handleClearDone","window","localStorage","getItem","this","setState","JSON","parse","setItem","stringify","confirm","prevState","previousState","event","preventDefault","fetch","then","response","json","data","toDoPosition","newDoneArray","newDoArray","slice","concat","newToDo","id","style","marginBottom","role","class","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.667e4da6.chunk.js","sourcesContent":["import React from 'react';\n\nconst AppHeader = () => {\n  return (\n    <div className=\"container-fluid text-center my-5\">\n      <h1 className=\"display-4\">Planning, simplified</h1>\n      <p className=\"lead text-muted\">A to-do list app by Arnau Gómez</p>\n    </div>\n  );\n};\n\nexport default AppHeader;\n","import React from 'react';\n\nconst AppFooter = () => {\n  return (\n    <footer className=\"text-center text-muted my-5 pt-5\">\n      <p>Made by <a href=\"https://twitter.com/4rnoldGee\" target=\"_blank\" rel=\"noopener noreferrer\">Arnau Gómez</a></p>\n      <p>Planning should be simple and fun. Follow me on <a href=\"https://dev.to/arnoldgee\" target=\"_blank\" rel=\"noopener noreferrer\">Dev</a> to learn more about coding & productivity.</p>\n      <i className=\"far fa-heart\" aria-hidden=\"true\"></i>\n    </footer>\n  );\n};\n\nexport default AppFooter;\n","import React from 'react';\n\nconst DoList = (props) => {\n  return (\n    <ul className=\"w-100 list-group list-group-flush\">\n      {props.doArray\n        .map((item, index) => {\n          return Object.assign(item, {index});\n        })\n        .sort((a, b) => {\n          // sorts by alphabetical order, if props.alphabeticalOrder === true\n          if (props.alphabeticalOrder) {\n            let nameA = a.name.toUpperCase();\n            let nameB = b.name.toUpperCase();\n\n            if (nameA > nameB) {\n              return 1;\n            }\n            if (nameA < nameB) {\n              return -1;\n            }\n          }\n          // a must be equal to b\n          return 0;\n        })\n        .sort((a, b) => {\n          // sorts by order of importance, if (props. importantOrder === true)\n          if (props.importantOrder) {\n            if (!a.important && b.important) {\n              return 1;\n            } else if (a.important && !b.important) {\n              return -1;\n            }\n          }\n          return 0;\n        })\n        .map((item) => (\n          <li\n            className=\" list-group-item d-flex justify-content-between align-items-center\"\n            key={item.index}\n          >\n            <span\n              className=\"to-do-element w-100 d-flex justify-content-start align-items-center\"\n              title={item.index}\n              onClick={props.handleCompleteToDo}\n            >\n              <p\n                className=\"mr-3 animated-emoji mb-0\"\n                dangerouslySetInnerHTML={{__html: item.emoji}}\n              ></p>\n              <p className=\"mb-0\">{item.name}</p>\n            </span>\n            <i\n              title={item.index}\n              className={\n                item.important\n                  ? 'fas fa-star important-task'\n                  : 'far fa-star unimportant-task'\n              }\n              onClick={props.handleMarkAsImportant}\n            ></i>\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nexport default DoList;\n","import React from 'react';\n\nconst DoneList = (props) => {\n  return (\n    <ul className=\"w-100 list-group list-group-flush\">\n      {props.doneArray\n        .map((item, index) => {\n          return Object.assign(item, {index});\n        })\n        .sort((a, b) => {\n          // sorts by alphabetical order, if props.alphabeticalOrder === true\n          if (props.alphabeticalOrder) {\n            let nameA = a.name.toUpperCase();\n            let nameB = b.name.toUpperCase();\n\n            if (nameA > nameB) {\n              return 1;\n            }\n            if (nameA < nameB) {\n              return -1;\n            }\n          }\n          // a must be equal to b\n          return 0;\n        })\n        .map((item) => (\n          <li\n            className=\"to-do-element w-100 list-group-item d-flex\"\n            title={item.index}\n            onClick={props.handleReviveToDo}\n            key={item.index}\n          >\n            <span\n              className=\"mr-3 animated-emoji\"\n              dangerouslySetInnerHTML={{__html: item.emoji}}\n            ></span>\n            {item.name}\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nexport default DoneList;\n","import React from 'react';\n\nconst TaskInput = (props) => {\n  return (\n    <form className=\"form-group d-flex mb-0 mt-3\" onSubmit={props.handleAddToDo}>\n      \n        <input\n          type=\"text\"\n          value={props.userInput}\n          className=\"container-fluid form-control-lg border-0\"\n          onChange={props.handleWriteTask}\n          placeholder=\"Create to-do\"\n        ></input>\n      \n      <button className=\"btn btn-outline-success btn-lg border-0\" type=\"submit\">\n      <i className=\"fas fa-magic\"></i>\n      </button>\n    </form>\n  );\n};\n\nexport default TaskInput;\n","import React from 'react';\nimport DoList from './NotepadComponents/DoList.js';\nimport DoneList from './NotepadComponents/DoneList.js';\nimport TaskInput from './NotepadComponents/TaskInput.js';\n\n// The main component. State is managed here.\n\nclass NotePad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      section: 'To do',\n      alphabeticalOrder: false,\n      importantOrder: false,\n      doArray: [\n        {\n          name: 'Welcome to this minimal to-do list!',\n          emoji: \"🤗\",\n          important: false,\n        },\n        {\n          name: 'Click on me to complete the to-do',\n          emoji: \"✅\",\n          important: true,\n        },\n        {\n          name: 'Click on the To-do button in the upper left corner to see your completed tasks',\n          emoji: \"👉\",\n          important: false,\n        },\n      ],\n      doneArray: [\n        {\n          name: \"If you enjoy this project, don't forget to tweet the creator, @4rnoldGee!\",\n          emoji: \"💙\",\n          important: true,\n        },\n      ],\n      userInput: '',\n      randomEmoji: '\\u{1F4D3}',\n    };\n    this.handleChangeSection = this.handleChangeSection.bind(this);\n    this.handleSortByAlphabeticalOrder = this.handleSortByAlphabeticalOrder.bind(\n      this\n    );\n    this.handleSortByImportant = this.handleSortByImportant.bind(this);\n    this.handleWriteTask = this.handleWriteTask.bind(this);\n    this.handleAddToDo = this.handleAddToDo.bind(this);\n    this.handleCompleteToDo = this.handleCompleteToDo.bind(this);\n    this.handleReviveToDo = this.handleReviveToDo.bind(this);\n    this.handleMarkAsImportant = this.handleMarkAsImportant.bind(this);\n    this.getRandomEmoji = this.getRandomEmoji.bind(this);\n    this.autoSave = this.autoSave.bind(this);\n    this.handleClearDone = this.handleClearDone.bind(this);\n  }\n\n  componentDidMount() {\n    // FALTA REVISAR\n    if (window.localStorage.getItem('doArray')) {\n      this.setState({\n        doArray: JSON.parse(window.localStorage.getItem('doArray')),\n      });\n    }\n    if (window.localStorage.getItem('doneArray')) {\n      this.setState({\n        doneArray: JSON.parse(window.localStorage.getItem('doneArray')),\n      });\n    }\n  }\n  autoSave() {\n    window.localStorage.setItem('doArray', JSON.stringify(this.state.doArray));\n    window.localStorage.setItem(\n      'doneArray',\n      JSON.stringify(this.state.doneArray)\n    );\n  }\n  handleClearDone() {\n    const deleteConfirmation = window.confirm(\n      'Do you want to delete all the completed tasks?'\n    );\n    if (deleteConfirmation) {\n      this.setState({\n        doneArray: [],\n      });\n      this.autoSave();\n    }\n  }\n\n  handleChangeSection() {\n    this.setState((prevState) => ({\n      section: prevState.section === 'To do' ? 'Done' : 'To do',\n    }));\n  }\n\n  handleSortByAlphabeticalOrder() {\n    this.setState((previousState) => ({\n      alphabeticalOrder: !previousState.alphabeticalOrder,\n    }));\n  }\n  handleSortByImportant() {\n    this.setState((previousState) => ({\n      importantOrder: !previousState.importantOrder,\n    }));\n  }\n\n  handleWriteTask(event) {\n    this.setState({\n      userInput: event.target.value,\n    });\n  }\n  handleAddToDo(event) {\n    event.preventDefault();\n    if (this.state.userInput !== '') {\n      this.setState((prevState) => ({\n        doArray: [\n          {\n            name: prevState.userInput,\n            emoji: prevState.randomEmoji,\n            important: false,\n          },\n          ...prevState.doArray,\n        ],\n        userInput: '',\n      }));\n      this.getRandomEmoji();\n      this.autoSave();\n    }\n  }\n  getRandomEmoji() {\n    fetch('https://ranmoji.herokuapp.com/emojis/api/v.1.0/').then(\n      (response) => {\n        response.json().then((data) => {\n          this.setState({\n            randomEmoji: data.emoji,\n          });\n        });\n      }\n    );\n  }\n\n  handleCompleteToDo(event) {\n    const {doArray, doneArray} = this.state;\n    const toDoPosition = +event.target.title;\n\n    let newDoneArray = [doArray[toDoPosition], ...doneArray];\n    let newDoArray = doArray\n      .slice(0, toDoPosition)\n      .concat(doArray.slice(toDoPosition + 1));\n\n    this.setState({\n      doArray: newDoArray,\n      doneArray: newDoneArray,\n    });\n    this.autoSave();\n  }\n\n  handleReviveToDo(event) {\n    const {doArray, doneArray} = this.state;\n    const toDoPosition = +event.target.title;\n\n    let newDoArray = [doneArray[toDoPosition], ...doArray];\n    //alert(newDoArray)\n    let newDoneArray = doneArray\n      .slice(0, toDoPosition)\n      .concat(doneArray.slice(toDoPosition + 1));\n\n    this.setState({\n      doArray: newDoArray,\n      doneArray: newDoneArray,\n    });\n    this.autoSave();\n  }\n\n  handleMarkAsImportant(event) {\n    const toDoPosition = +event.target.title;\n    const newToDo = {\n      name: this.state.doArray[toDoPosition].name,\n      emoji: this.state.doArray[toDoPosition].emoji,\n      important: !this.state.doArray[toDoPosition].important,\n    };\n    this.setState((prevState) => ({\n      doArray: [\n        ...prevState.doArray.slice(0, toDoPosition),\n        newToDo,\n        ...prevState.doArray.slice(toDoPosition + 1),\n      ],\n    }));\n    this.autoSave();\n  }\n\n  render() {\n    const {\n      section,\n      doArray,\n      doneArray,\n      userInput,\n      alphabeticalOrder,\n      importantOrder,\n    } = this.state;\n\n    return (\n      <main className=\"container-fluid vw-100 d-flex justify-content-center mb-5\">\n        <div id=\"notePad\" className=\"w-100 p-4 shadow-lg\">\n          <div className=\"d-flex mb-4 justify-content-between\">\n            <button\n              id=\"section-title\"\n              className={\n                section === 'To do'\n                  ? 'btn border-0 btn-outline-dark btn-lg'\n                  : 'btn border-0 btn-dark btn-lg'\n              }\n              onClick={this.handleChangeSection}\n            >\n              {section}\n            </button>\n            <div>\n              <span className=\"text-muted\" style={{marginBottom: '0px'}}>\n                Sort by:\n              </span>\n              <div className=\"btn-group ml-4\" role=\"group\">\n                <button\n                  className={\n                    alphabeticalOrder\n                      ? 'btn btn-info btn-lg'\n                      : 'btn btn-outline-info btn-lg'\n                  }\n                  onClick={this.handleSortByAlphabeticalOrder}\n                >\n                  Aa\n                </button>\n                {section === 'To do' ? (\n                  <button\n                    className={\n                      importantOrder\n                        ? 'btn btn-info btn-lg'\n                        : 'btn btn-outline-info btn-lg'\n                    }\n                    onClick={this.handleSortByImportant}\n                  >\n                    <i className=\"far fa-star\"></i>\n                  </button>\n                ) : (\n                  <button\n                    className={\n                      importantOrder\n                        ? 'btn btn-danger btn-lg'\n                        : 'btn btn-outline-danger btn-lg'\n                    }\n                    onClick={this.handleClearDone}\n                  >\n                    <i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i>\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {section === 'To do' ? (\n            <DoList\n              doArray={doArray}\n              handleCompleteToDo={this.handleCompleteToDo}\n              handleMarkAsImportant={this.handleMarkAsImportant}\n              alphabeticalOrder={alphabeticalOrder}\n              importantOrder={importantOrder}\n            />\n          ) : (\n            <DoneList\n              doneArray={doneArray}\n              handleReviveToDo={this.handleReviveToDo}\n              alphabeticalOrder={alphabeticalOrder}\n            />\n          )}\n\n          <TaskInput\n            userInput={userInput}\n            handleWriteTask={this.handleWriteTask}\n            handleAddToDo={this.handleAddToDo}\n          />\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default NotePad;\n","import React from 'react';\nimport AppHeader from './AppHeader.js';\nimport AppFooter from './AppFooter.js';\nimport NotePad from './NotePad.js';\nfunction App() {\n  return (\n    <div>\n      <AppHeader />\n      <NotePad />\n      <AppFooter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}